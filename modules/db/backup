# Backup provided database
# Author: Alexander Kovalev
# Dec. 16, 2013 (last updated 12/27/2013)
# ------------------------------------------------------

# check whiptail and dialog
check_gui() {
    echo $(which whiptailx dialogx  2> /dev/null)
}

# check if database exists
db_exists() {
    local db_query=$(mysql --user="${db_user}" --password="${db_pass}" --host="${db_host}" -e "SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = '${1}';")
    echo ${db_query} | awk '{print $2}'
}

# show message with provided text
mb_msg() {
    local title=$2
    whiptail --msgbox "${1}" 8 60 --title "${title:=Notification}" --clear
}

# backup database
backup() {
    local settings=${migbash_modules_path}${module}'/db.ini'
    local db_user=$(awk -F "=" '/db_user/ {print $2}' ${settings})
    local db_pass=$(awk -F "=" '/db_pass/ {print $2}' ${settings})
    local db_host=$(awk -F "=" '/db_host/ {print $2}' ${settings})
    local db_port=$(awk -F "=" '/db_port/ {print $2}' ${settings})
    local db_name=""

    if [[ $(check_gui) ]]
    then
        db_name=$(whiptail --inputbox "Input database name to backup" 8 78 --title "MigBash - db.backup" --clear 3>&1 1>&2 2>&3)
        if [[ ${db_name} == "" ]]
        then
            mb_msg "You must provide database name to make a backup"
            exit 0
        fi
    else
        # neither whiptail nor dialog were found
        echo "Enter database name:"
        read db_name
    fi

    # check if database name has been provided
    if [[ ${db_name} == "" ]]
    then
        echo "You must provide database name to make a backup"
        exit 0
    fi

    echo ${db_name}

    local name=${db_name}"_$(date '+%F_%H%M%S')"

    # if path to save backup has been provided then use it
    # otherwise use default path from settings (db/db.ini)
    local config_path=$(awk -F "=" '/path/ {print $2}' ${settings})
    local path=$(whiptail --inputbox "Input path to save the backup\nDefault path: ${config_path}" 8 78 --title "MigBash - db.backup" --clear 3>&1 1>&2 2>&3)

    local database=$(db_exists ${db_name})

    if [[ "${database}" != ""  ]]
    then
        #mysqldump --user="${db_user}" --password="${db_pass}" --host="${db_host=127.0.0.1}" --port="${db_port=3306}" ${db_name} -R -v | gzip > ${path:=${config_path}}${name}.sql.gz
        if [[ -f ${path}${name}.sql.gz ]]
        then
            whiptail --title "MigBash - db.backup" --msgbox "Backup: ${name}.sql.gz\nhas been successfully created\nin: ${path} " 10 70 --clear
        else
            whiptail --title "MigBash - db.backup" --msgbox "The dump couldn't be saved..." 8 70 --clear
        fi
    else
        echo "sorry..."
    fi
}

# restore database
restore() {
    local settings=${migbash_modules_path}${module}'/db.ini'
    local db_user=$(awk -F "=" '/db_user/ {print $2}' ${settings})
    local db_pass=$(awk -F "=" '/db_pass/ {print $2}' ${settings})
    local db_host=$(awk -F "=" '/db_host/ {print $2}' ${settings})
    local db_port=$(awk -F "=" '/db_port/ {print $2}' ${settings})
    local db_name=$1
    local path=$2 # path to a dump file that is needed to be restored

    if [[ ! -f ${path} ]]
    then
        echo -en "Please, provide the path to a dump file\r\n"
        exit 0
    fi

    mysql --user="${db_user}" --password="${db_pass}" --host="${db_host=127.0.0.1}" --port="${db_port=3306}" "${db_name}" < ${path}
}

# show help info
backup_help() {
    echo -en "backup \t - Backup provided database\r\n"
}